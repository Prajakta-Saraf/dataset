# import all libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt 
import seaborn as sns
import re

import sklearn
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.preprocessing import scale
from sklearn.feature_selection import RFE
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.pipeline import make_pipeline




df = pd.read_csv("aapl.us.txt")
print(df.head(5))

X = df[['Open', 'High', 'Low', 'Volume']]
Y =df['Close']

print(X)
print(Y)

X_train, X_test, y_train, y_test = train_test_split( X, Y, test_size=0.33, random_state=34)

print('training dataset-')
print(X_train)

print('testing dataset-')
print(X_test)


# fit multiple polynomial features
degrees = [1, 2, 3, 4, 5, 6, 10, 20]

# initialise y_train_pred and y_test_pred matrices to store the train and test predictions
# each row is a data point, each column a prediction using a polynomial of some degree
y_train_pred = np.zeros((len(X_train), len(degrees)))
y_test_pred = np.zeros((len(X_test), len(degrees)))

for i, degree in enumerate(degrees):
    
    # make pipeline: create features, then feed them to linear_reg model
    model = make_pipeline(PolynomialFeatures(degree), LinearRegression())
    model.fit(X_train, y_train)
    
    # predict on test and train data
   
    r_sq = model.score(X_test, y_test)
    print(degree)
    print(' Training Score ')
    r_sq1 = model.score(X_train, y_train)
    print(r_sq1)

    print(' Testing Score ')
    print(r_sq)
    
    
